<CsoundSynthesizer>
  <CsOptions>
    -odac
    --nchnls=2
  </CsOptions>
  <CsInstruments>
    ; This function will be used for amplitude modulation.
    ; This function will generate 16384 points.
    ;
    ; The first 16384 * 0.1 => 1638 points will modulate the amplitude
    ; of the signal generated to go from 0 volume up to the maximum volume
    ; given as input (e.g. 0dBfs/2). See the +p4+ parameter in +schedule+.
    ; The increase from 0 to maximum will be linear and gradual using a
    ; constant increment value (? which one is this ?)
    ;
    ; The next 16384 * 0.8 => 13107 points will modulate the amplitude
    ; of the signal generated to stay at the maximum given.
    ;
    ; The next 16384 * 0.1 => 1638 points will modulate in a similar
    ; to the first chunk of points, but will decrease the amplitude from
    ; maximum given to 0.
    ;
    isize1 = 16384
    ifn ftgen 1, 0, isize1, 7, ; constructs segments from points
              0, isize1 * 0.1, 1,
                 isize1 * 0.8, 1,
                 isize1 * 0.1, 0

    ; This function generates only 4 points, which are the multiplliers
    ; by which we are going to multiply our initial/given pitch. The
    ; 4 pitches generated by the multiplication will constitute our arpegge/4-notes-chord.
    ; For example, to generate the A Major chord with notes
    ;
    ; A4-C5#-E5-A5
    ;
    ; since A4 is 440Hz, C5# is 554.37, E5 is 659.25 and A5 is 880
    ;
    ; then multipliers should be
    ;
    ; 1, 1.2599318181818182, 1.4982954545454545, 2
    ;
    ; For the full table of Notes and Frequencies see here: https://pages.mtu.edu/~suits/notefreqs.html
    ;
    ifn ftgen 2, 0, 4, -2, ; a function that generates 4 points as given in arguments
              1, 1.2599318181818182, 1.4982954545454545, 2

    instr 1
      ; reads the function table 1 sequentially, one position at a time
      ; from position 0 till end of table.
      ; How often? Every +p3+ seconds. Hence it will read it only once
      ; for the duration of the playback?
      ;
      ; Generates periodic control signals consisting of the value
      ; p4 * whatever is the function table point at the point of sampling
      ;
      kenv oscili p4,   ; amplitude
                  1/p3, ; frequency. 1 / (duration of generation) hence only once
                  1     ; Get values from function table 1. This is the table
                        ; with the 16384 points ranging from 0 to 1,
                        ; linearly going from from 0 to 1 staying 1 and then
                        ; going back to 0.

      kpitch table phasor:k(p6), ; index of position to access
                   2,            ; get data from function 2 (the 4 points)
                   1             ; normalize 0 - 1 (hence 1 - 2 will be normalized to 0 - 1)

      asig oscili kenv,       ; on value of 0 -> 1------1 -> 0
                  p5 * kpitch ; kpitch is a value between 0 and 1 and p5 is the Pitch given
                              ; hence, we multiply the pitch given with a factor that would
                              ; generate the unison, major third, perfect fifth, octave pitches.

      out asig, asig
    endin
    schedule(1, 0, 1, 0dbfs / 2, 440, 1)  ; A Major chord/arpegge
                                          ; the last p6 argument "1"
                                          ; is telling how we step from 1 multiplier to
                                          ; the next. So, with "1" we go from one to the
                                          ; immediately next (1 -> 1.25 -> 1.5 -> 2).
                                          ; If we set this to "2" for example, it will
                                          ; jump over the even multipliers
                                          ;
                                          ; It is how many times it will play the arpeggio
                                          ; within 1 second.
  </CsInstruments>
  <CsScore>
  </CsScore>
</CsoundSynthesizer>
